package net.aholbrook.paseto.test.data;

import net.aholbrook.paseto.service.Token;

import java.time.LocalDate;
import java.time.LocalTime;
import java.time.OffsetDateTime;
import java.time.ZoneOffset;
import java.util.Objects;

public class TokenTestVectors {
	// q9Rq3FfaAyN8JWyVJhphybm9DaFNLVt2FqHqvZJuUrD3uPEU
	private static short[] TEST_KEY = new short[] {
			0x71, 0x39, 0x52, 0x71, 0x33, 0x46, 0x66, 0x61, 0x41, 0x79, 0x4e, 0x38, 0x4a, 0x57, 0x79, 0x56,
			0x4a, 0x68, 0x70, 0x68, 0x79, 0x62, 0x6d, 0x39, 0x44, 0x61, 0x46, 0x4e, 0x4c, 0x56, 0x74, 0x32,
			0x46, 0x71, 0x48, 0x71, 0x76, 0x5a, 0x4a, 0x75, 0x55, 0x72, 0x44, 0x33, 0x75, 0x50, 0x45, 0x55
	};

	// SmpF7Y5DeSJFJxjMrnDSwnUv
	private static short[] TEST_NONCE = new short[] {
			0x53, 0x6d, 0x70, 0x46, 0x37, 0x59, 0x35, 0x44, 0x65, 0x53, 0x4a, 0x46,
			0x4a, 0x78, 0x6a, 0x4d, 0x72, 0x6e, 0x44, 0x53, 0x77, 0x6e, 0x55, 0x76,
	};

	private static short[] TEST_SK = new short[] {
			0x45, 0x2c, 0x19, 0x69, 0xed, 0x48, 0x06, 0xc8, 0xd4, 0x8e, 0xe4, 0xc6, 0x70, 0xdf, 0x98, 0x01,
			0x83, 0xf6, 0x79, 0x66, 0x33, 0x78, 0x7b, 0x15, 0xa0, 0x3f, 0x09, 0xcb, 0x24, 0xee, 0xbe, 0x7c,
			0x43, 0x2f, 0xa8, 0x2f, 0xc6, 0x15, 0xa2, 0x31, 0x92, 0xc7, 0xcb, 0x24, 0xcd, 0x3d, 0xfc, 0x48,
			0x97, 0xc6, 0xe1, 0x13, 0xdb, 0x87, 0xdc, 0xed, 0x76, 0x04, 0xd3, 0x4d, 0x06, 0xc5, 0xb6, 0x8d
	};

	private static short[] TEST_PK = new short[] {
			0x43, 0x2f, 0xa8, 0x2f, 0xc6, 0x15, 0xa2, 0x31, 0x92, 0xc7, 0xcb, 0x24, 0xcd, 0x3d, 0xfc, 0x48,
			0x97, 0xc6, 0xe1, 0x13, 0xdb, 0x87, 0xdc, 0xed, 0x76, 0x04, 0xd3, 0x4d, 0x06, 0xc5, 0xb6, 0x8d
	};

	// paseto-base/test_v1_rsa
	private static short[] TEST_RSA_PRIVATE_KEY = new short[] {
			0x30, 0x82, 0x04, 0xbd, 0x02, 0x01, 0x00, 0x30, 0x0d, 0x06, 0x09, 0x2a, 0x86, 0x48, 0x86, 0xf7,
			0x0d, 0x01, 0x01, 0x01, 0x05, 0x00, 0x04, 0x82, 0x04, 0xa7, 0x30, 0x82, 0x04, 0xa3, 0x02, 0x01,
			0x00, 0x02, 0x82, 0x01, 0x01, 0x00, 0xb2, 0x82, 0xb5, 0x32, 0x72, 0x4e, 0x96, 0x46, 0x34, 0x99,
			0x47, 0x45, 0x2b, 0x64, 0xb0, 0xff, 0x15, 0x97, 0xf8, 0x42, 0x81, 0x61, 0x78, 0x50, 0x11, 0xe4,
			0x3a, 0x11, 0x87, 0xa9, 0x04, 0x66, 0xc4, 0x20, 0x27, 0x16, 0x26, 0x90, 0x9b, 0x86, 0x5f, 0x2f,
			0xdd, 0x1d, 0x46, 0x35, 0xa0, 0x25, 0xb5, 0xa3, 0x43, 0x94, 0xa2, 0xfa, 0x4b, 0xcf, 0xa9, 0x63,
			0x88, 0x6c, 0xd0, 0x30, 0x8b, 0x49, 0x11, 0xb2, 0xa7, 0x02, 0xc8, 0x9a, 0xa3, 0x8e, 0xbd, 0x80,
			0xde, 0xc7, 0xb3, 0x67, 0x22, 0x6a, 0xb5, 0x04, 0xec, 0x29, 0x48, 0x70, 0x37, 0xd5, 0x09, 0xdb,
			0x7e, 0x9f, 0x6b, 0xb0, 0x9a, 0x83, 0xcd, 0xd2, 0xf2, 0x0a, 0xc4, 0xd6, 0x64, 0xba, 0x6d, 0xf7,
			0xe5, 0xb7, 0xa1, 0xbb, 0x08, 0xe4, 0x72, 0x97, 0x78, 0x1b, 0x19, 0xe1, 0xcc, 0x1a, 0x50, 0xc4,
			0xef, 0x11, 0x05, 0x9f, 0xf4, 0x51, 0xe7, 0x2d, 0x81, 0x78, 0x04, 0x02, 0x83, 0x32, 0x55, 0x2d,
			0xe5, 0x0f, 0xb0, 0xd5, 0x87, 0x8a, 0x12, 0xf3, 0xd5, 0x59, 0x00, 0x7b, 0xbb, 0x85, 0x61, 0x3a,
			0x7f, 0x61, 0x17, 0xd9, 0x94, 0x5b, 0xc2, 0x62, 0x66, 0xca, 0x12, 0xa7, 0x5d, 0x1b, 0xda, 0x71,
			0x3c, 0xe0, 0x3f, 0x85, 0xce, 0x59, 0xe2, 0x6c, 0x12, 0xc0, 0x22, 0xa3, 0x55, 0x4b, 0x75, 0x2a,
			0x8e, 0x15, 0xcf, 0x25, 0x97, 0x25, 0x32, 0xb5, 0x05, 0x2a, 0xb2, 0x94, 0xec, 0xee, 0x2a, 0xc8,
			0x09, 0x16, 0xeb, 0x37, 0x23, 0x28, 0x15, 0x3f, 0xb1, 0xc8, 0x8e, 0xdc, 0x84, 0x09, 0xaf, 0x5b,
			0xd4, 0x2a, 0x3b, 0x11, 0xea, 0xf8, 0xcc, 0xa7, 0x0c, 0xc6, 0x2a, 0x8a, 0x47, 0x70, 0xf5, 0xef,
			0x26, 0x17, 0xb6, 0xdc, 0x77, 0xc0, 0x1c, 0xeb, 0x6b, 0x8c, 0xfa, 0xa2, 0xa3, 0x97, 0x9a, 0x2c,
			0xb7, 0x05, 0x95, 0x1e, 0x0c, 0x95, 0x02, 0x03, 0x01, 0x00, 0x01, 0x02, 0x82, 0x01, 0x00, 0x11,
			0xd9, 0x61, 0xf6, 0xd6, 0x59, 0x27, 0x4b, 0x83, 0xcc, 0xe3, 0xc4, 0x75, 0xcf, 0x4e, 0xa7, 0x62,
			0xe8, 0x5c, 0x29, 0x82, 0x38, 0x55, 0xc8, 0x63, 0xd1, 0x97, 0x40, 0xd3, 0x78, 0xc1, 0xf8, 0xe8,
			0x99, 0x72, 0x6f, 0x13, 0x92, 0x18, 0x0a, 0xfa, 0x8f, 0x95, 0xa3, 0x6c, 0xb6, 0xc5, 0xf9, 0x9f,
			0x4c, 0xe0, 0xe0, 0x06, 0xdf, 0xd2, 0x1e, 0xc4, 0x88, 0x30, 0x46, 0xf9, 0x16, 0x31, 0x87, 0x2f,
			0xde, 0xd6, 0x36, 0x40, 0x0a, 0xbe, 0x59, 0xf2, 0x76, 0xe5, 0x4f, 0xc0, 0x8f, 0x8a, 0x70, 0x73,
			0x03, 0x37, 0xfd, 0xf4, 0xc1, 0x4b, 0xc3, 0xe0, 0x85, 0x73, 0x06, 0xcb, 0xc4, 0xcf, 0xde, 0x68,
			0x01, 0x34, 0xb4, 0x80, 0xf4, 0x13, 0x04, 0x55, 0x24, 0x99, 0x72, 0xa0, 0x18, 0x4c, 0x8e, 0x53,
			0x2a, 0xf4, 0x16, 0x79, 0xa3, 0x0b, 0x3e, 0x82, 0x5e, 0xfe, 0xac, 0x8c, 0x0c, 0x6f, 0x68, 0x6a,
			0x5e, 0x09, 0x98, 0xbd, 0x30, 0xc8, 0x59, 0x9f, 0x5e, 0xa5, 0x77, 0x86, 0x27, 0x20, 0x09, 0x2f,
			0x75, 0xa8, 0x22, 0x23, 0x80, 0x35, 0x2a, 0xef, 0xe1, 0x75, 0x16, 0x51, 0xa8, 0x62, 0xa5, 0x93,
			0x50, 0xa6, 0xb0, 0x4d, 0x51, 0x48, 0x3a, 0x4b, 0x02, 0x7e, 0x94, 0x74, 0xa4, 0x97, 0xf6, 0x78,
			0xdd, 0xa1, 0xe9, 0x6e, 0xd0, 0x3a, 0x5c, 0xe8, 0xd9, 0x67, 0x7d, 0x93, 0x7a, 0xd7, 0xb9, 0xde,
			0xd7, 0x97, 0x28, 0xfb, 0xe7, 0x72, 0x6a, 0x65, 0x4c, 0x0e, 0x8c, 0xda, 0x03, 0xcd, 0x74, 0x15,
			0x21, 0x9b, 0x48, 0x23, 0xab, 0x4e, 0xa8, 0xa9, 0xfd, 0xb8, 0x32, 0x16, 0x59, 0x28, 0x31, 0xb9,
			0x3e, 0x2f, 0xe2, 0xbf, 0x4a, 0x61, 0xe0, 0x61, 0xc9, 0x04, 0x98, 0xaa, 0x2f, 0xb4, 0x81, 0x5c,
			0xce, 0xb2, 0x81, 0x19, 0x98, 0xfe, 0x36, 0x1f, 0x23, 0x56, 0xff, 0x24, 0x81, 0x87, 0xe1, 0x02,
			0x81, 0x81, 0x00, 0xd5, 0xec, 0x46, 0xec, 0x69, 0x94, 0xde, 0x56, 0xc7, 0x52, 0x4c, 0xaa, 0xb5,
			0x9d, 0x00, 0xcf, 0x71, 0xbd, 0xef, 0x72, 0x73, 0x1d, 0x0b, 0xfe, 0x80, 0x2d, 0x73, 0x2d, 0xe9,
			0x9e, 0xd1, 0x45, 0x87, 0x12, 0xd0, 0x23, 0x0f, 0x06, 0x92, 0xa8, 0x4e, 0x8e, 0x2e, 0xca, 0x34,
			0xf7, 0x01, 0xe2, 0x73, 0xea, 0xa9, 0x05, 0x4b, 0xd5, 0x0f, 0xcb, 0xc1, 0x26, 0x9c, 0x27, 0x7c,
			0x38, 0xda, 0x14, 0x04, 0x52, 0xe8, 0x35, 0x1f, 0x34, 0xb9, 0x4f, 0x6f, 0xef, 0xf4, 0x51, 0x4f,
			0x22, 0xbf, 0x02, 0x08, 0x51, 0xd1, 0x61, 0x00, 0xbc, 0xe4, 0xe4, 0x1b, 0x81, 0xd1, 0xe5, 0x84,
			0x3b, 0x58, 0xf7, 0x82, 0x1a, 0xce, 0x26, 0xde, 0xb5, 0xa0, 0x62, 0xf7, 0x2b, 0xce, 0x5f, 0x37,
			0xcb, 0xec, 0x11, 0x72, 0xe2, 0xef, 0x27, 0x74, 0x34, 0xc7, 0x7b, 0x6d, 0x86, 0xe6, 0x23, 0x3e,
			0xda, 0xf6, 0x4d, 0x02, 0x81, 0x81, 0x00, 0xd5, 0x9f, 0x4d, 0x1c, 0x45, 0xf2, 0x72, 0x90, 0x52,
			0xe5, 0x86, 0x42, 0xda, 0x39, 0x42, 0xdb, 0xef, 0x09, 0x4c, 0xed, 0x03, 0x2d, 0xfb, 0xb3, 0x37,
			0x9b, 0x21, 0xd9, 0xec, 0xb0, 0x2e, 0xcb, 0x25, 0xee, 0xd2, 0x58, 0xe1, 0xbc, 0x27, 0xa3, 0xfa,
			0xa5, 0xc6, 0xc0, 0xde, 0x55, 0x45, 0x0f, 0x99, 0xc9, 0x61, 0xa3, 0xff, 0x04, 0x9b, 0x02, 0x54,
			0xf4, 0x94, 0x2c, 0x52, 0xac, 0x8b, 0x80, 0xe3, 0x51, 0xbe, 0x8d, 0x9e, 0x4c, 0x25, 0xf3, 0xfb,
			0xb7, 0x13, 0x86, 0x7e, 0xf3, 0x2a, 0xaf, 0xda, 0x4f, 0xcc, 0x91, 0xa1, 0x99, 0x9c, 0xb9, 0xce,
			0xd3, 0x8e, 0x3f, 0xed, 0x49, 0x67, 0x45, 0x7b, 0xc6, 0x4a, 0xb2, 0x3c, 0x82, 0xff, 0x78, 0x6c,
			0xa3, 0xeb, 0x2b, 0x1f, 0xec, 0x9d, 0xec, 0x6a, 0x5a, 0x65, 0x33, 0x02, 0x39, 0xd4, 0xcc, 0xdb,
			0x4b, 0x4b, 0x6a, 0x62, 0x6c, 0xa3, 0x69, 0x02, 0x81, 0x81, 0x00, 0xae, 0xf0, 0x6c, 0x07, 0x85,
			0x48, 0x22, 0x92, 0xe0, 0xa9, 0x62, 0xdc, 0xef, 0x6c, 0x17, 0x6f, 0x8d, 0x5a, 0x7f, 0xe8, 0x1e,
			0x4f, 0x10, 0xb1, 0xed, 0x6c, 0x3d, 0x96, 0xbc, 0x48, 0x0e, 0x67, 0x47, 0x50, 0x91, 0x39, 0x3a,
			0x5e, 0x6b, 0xac, 0x8b, 0xa1, 0x26, 0x8e, 0x61, 0xc5, 0xe5, 0x9a, 0xa4, 0xa4, 0xaf, 0xd8, 0x0e,
			0xed, 0x8b, 0xdf, 0x5a, 0x73, 0x12, 0x9c, 0x0f, 0xb0, 0x06, 0x56, 0xfc, 0x3a, 0x38, 0x7e, 0xc8,
			0xa8, 0x3b, 0x2a, 0xc5, 0x25, 0x7b, 0xac, 0xca, 0x84, 0x65, 0xa3, 0x69, 0xde, 0x4e, 0xd5, 0x7e,
			0xde, 0xfa, 0x67, 0xb8, 0x3e, 0xef, 0xc1, 0x3b, 0xe3, 0xb4, 0x9b, 0xa3, 0x9f, 0xfc, 0x1a, 0x39,
			0x62, 0x5a, 0x68, 0xd4, 0x2c, 0xd4, 0xb5, 0x75, 0x51, 0xa4, 0x19, 0x98, 0xd4, 0x10, 0x33, 0x39,
			0x8a, 0xb7, 0xdf, 0x2d, 0xf0, 0x75, 0x5f, 0x39, 0x55, 0xa2, 0xb9, 0x02, 0x81, 0x80, 0x3d, 0x83,
			0xb9, 0xf8, 0xc2, 0x4b, 0xa6, 0xa1, 0xd8, 0xbd, 0x2f, 0x84, 0x60, 0xc2, 0xcc, 0x75, 0xf8, 0xc7,
			0x7c, 0xd7, 0x63, 0x6b, 0x02, 0x68, 0x01, 0x43, 0x32, 0xe4, 0x46, 0x3c, 0x15, 0xbd, 0x7a, 0x16,
			0xe3, 0x8b, 0xa4, 0xb5, 0x41, 0xd4, 0xfe, 0x80, 0x6e, 0x53, 0x6b, 0xb2, 0xb2, 0x48, 0x63, 0xc8,
			0x91, 0xcd, 0x5f, 0xca, 0x3b, 0xb8, 0xd8, 0x2d, 0xf5, 0xdd, 0x2d, 0x91, 0x72, 0x3a, 0x93, 0x3b,
			0x1e, 0xdc, 0x39, 0x11, 0x44, 0x7c, 0x95, 0xa7, 0x8a, 0x7f, 0xd8, 0x5e, 0xbd, 0x94, 0x16, 0x11,
			0x94, 0x9e, 0xfb, 0x21, 0xf8, 0xf7, 0xa8, 0x8f, 0x53, 0x0f, 0x25, 0x8d, 0x55, 0xa7, 0xb4, 0x94,
			0xcd, 0x3d, 0xb6, 0x1f, 0x22, 0xe1, 0xd2, 0xa7, 0x01, 0x39, 0x51, 0xe0, 0x19, 0x39, 0xd3, 0x06,
			0x64, 0xcd, 0xe3, 0x7e, 0x33, 0xc1, 0x2a, 0x04, 0xec, 0x9a, 0x9d, 0xed, 0x1a, 0xc1, 0x02, 0x81,
			0x80, 0x2a, 0x56, 0xa5, 0xda, 0xc6, 0x34, 0xa1, 0x4a, 0x69, 0x33, 0x54, 0xf0, 0x00, 0xc6, 0xd0,
			0xd8, 0x12, 0xa6, 0xb1, 0x23, 0x78, 0xfd, 0xc8, 0xd1, 0xd6, 0xa2, 0x42, 0xd8, 0x52, 0x86, 0x63,
			0x1e, 0xd6, 0x6a, 0x9c, 0xb8, 0x67, 0x96, 0x63, 0x31, 0x3a, 0x62, 0x9e, 0x1c, 0xe7, 0x39, 0x1b,
			0x35, 0x06, 0x31, 0x34, 0x14, 0xc8, 0x8b, 0x3f, 0x4d, 0x8e, 0xa2, 0xdc, 0x3a, 0x0f, 0x97, 0x4b,
			0xa0, 0x1a, 0x34, 0xef, 0x42, 0x80, 0xd4, 0xab, 0xd5, 0xed, 0x55, 0xdd, 0x64, 0x5f, 0x77, 0x5a,
			0x6d, 0x30, 0x85, 0xf0, 0xd4, 0xd2, 0x47, 0x73, 0x27, 0xa4, 0xff, 0x81, 0x0a, 0x4f, 0x88, 0xa3,
			0x9a, 0xdc, 0x10, 0x40, 0x90, 0x0e, 0x9d, 0xe1, 0x44, 0x15, 0x78, 0xd4, 0x2f, 0xd9, 0x97, 0x7e,
			0xf2, 0x30, 0x69, 0x16, 0x1a, 0x88, 0x2c, 0x59, 0x40, 0x3e, 0x87, 0xbd, 0xa2, 0x5d, 0xe0, 0xa9,
			0x8c
	};

	// paseto-base/test_v1_rsa.pub
	private static short[] TEST_RSA_PUBLIC_KEY = new short[] {
			0x30, 0x82, 0x01, 0x22, 0x30, 0x0d, 0x06, 0x09, 0x2a, 0x86, 0x48, 0x86, 0xf7, 0x0d, 0x01, 0x01,
			0x01, 0x05, 0x00, 0x03, 0x82, 0x01, 0x0f, 0x00, 0x30, 0x82, 0x01, 0x0a, 0x02, 0x82, 0x01, 0x01,
			0x00, 0xb2, 0x82, 0xb5, 0x32, 0x72, 0x4e, 0x96, 0x46, 0x34, 0x99, 0x47, 0x45, 0x2b, 0x64, 0xb0,
			0xff, 0x15, 0x97, 0xf8, 0x42, 0x81, 0x61, 0x78, 0x50, 0x11, 0xe4, 0x3a, 0x11, 0x87, 0xa9, 0x04,
			0x66, 0xc4, 0x20, 0x27, 0x16, 0x26, 0x90, 0x9b, 0x86, 0x5f, 0x2f, 0xdd, 0x1d, 0x46, 0x35, 0xa0,
			0x25, 0xb5, 0xa3, 0x43, 0x94, 0xa2, 0xfa, 0x4b, 0xcf, 0xa9, 0x63, 0x88, 0x6c, 0xd0, 0x30, 0x8b,
			0x49, 0x11, 0xb2, 0xa7, 0x02, 0xc8, 0x9a, 0xa3, 0x8e, 0xbd, 0x80, 0xde, 0xc7, 0xb3, 0x67, 0x22,
			0x6a, 0xb5, 0x04, 0xec, 0x29, 0x48, 0x70, 0x37, 0xd5, 0x09, 0xdb, 0x7e, 0x9f, 0x6b, 0xb0, 0x9a,
			0x83, 0xcd, 0xd2, 0xf2, 0x0a, 0xc4, 0xd6, 0x64, 0xba, 0x6d, 0xf7, 0xe5, 0xb7, 0xa1, 0xbb, 0x08,
			0xe4, 0x72, 0x97, 0x78, 0x1b, 0x19, 0xe1, 0xcc, 0x1a, 0x50, 0xc4, 0xef, 0x11, 0x05, 0x9f, 0xf4,
			0x51, 0xe7, 0x2d, 0x81, 0x78, 0x04, 0x02, 0x83, 0x32, 0x55, 0x2d, 0xe5, 0x0f, 0xb0, 0xd5, 0x87,
			0x8a, 0x12, 0xf3, 0xd5, 0x59, 0x00, 0x7b, 0xbb, 0x85, 0x61, 0x3a, 0x7f, 0x61, 0x17, 0xd9, 0x94,
			0x5b, 0xc2, 0x62, 0x66, 0xca, 0x12, 0xa7, 0x5d, 0x1b, 0xda, 0x71, 0x3c, 0xe0, 0x3f, 0x85, 0xce,
			0x59, 0xe2, 0x6c, 0x12, 0xc0, 0x22, 0xa3, 0x55, 0x4b, 0x75, 0x2a, 0x8e, 0x15, 0xcf, 0x25, 0x97,
			0x25, 0x32, 0xb5, 0x05, 0x2a, 0xb2, 0x94, 0xec, 0xee, 0x2a, 0xc8, 0x09, 0x16, 0xeb, 0x37, 0x23,
			0x28, 0x15, 0x3f, 0xb1, 0xc8, 0x8e, 0xdc, 0x84, 0x09, 0xaf, 0x5b, 0xd4, 0x2a, 0x3b, 0x11, 0xea,
			0xf8, 0xcc, 0xa7, 0x0c, 0xc6, 0x2a, 0x8a, 0x47, 0x70, 0xf5, 0xef, 0x26, 0x17, 0xb6, 0xdc, 0x77,
			0xc0, 0x1c, 0xeb, 0x6b, 0x8c, 0xfa, 0xa2, 0xa3, 0x97, 0x9a, 0x2c, 0xb7, 0x05, 0x95, 0x1e, 0x0c,
			0x95, 0x02, 0x03, 0x01, 0x00, 0x01
	};

	public final static Token TOKEN_1 = new Token()
			.setIssuer("paragonie.com")
			.setSubject("test")
			.setAudience("pie-hosted.com")
			.setExpiration(OffsetDateTime.of(LocalDate.of(2039, 1, 1),
				LocalTime.of(0, 0, 0), ZoneOffset.UTC))
			.setNotBefore(OffsetDateTime.of(LocalDate.of(2038, 4, 1),
				LocalTime.of(0, 0, 0), ZoneOffset.UTC))
			.setIssuedAt(OffsetDateTime.of(LocalDate.of(2038, 3, 17),
				LocalTime.of(0, 0, 0), ZoneOffset.UTC))
			.setTokenId("87IFSGFgPNtQNNuw0AtuLttP");
	public final static String TOKEN_1_STRING = "{\"exp\":\"2039-01-01T00:00:00+00:00\",\"iss\":\"paragonie.com\","
			+ "\"sub\":\"test\",\"aud\":\"pie-hosted.com\",\"jti\":\"87IFSGFgPNtQNNuw0AtuLttP\","
			+ "\"nbf\":\"2038-04-01T00:00:00+00:00\",\"iat\":\"2038-03-17T00:00:00+00:00\"}";

	public final static Token TOKEN_2 = new CustomToken()
			.setUserId(100L)
			.setIssuer("auth.example.com")
			.setSubject("user-auth")
			.setAudience("internal-service.example.com")
			.setExpiration(OffsetDateTime.of(LocalDate.of(2018, 1, 1),
					LocalTime.of(17, 23, 44), ZoneOffset.UTC))
			.setIssuedAt(OffsetDateTime.of(LocalDate.of(2018, 1, 1),
					LocalTime.of(17, 18, 44), ZoneOffset.UTC))
			.setNotBefore(OffsetDateTime.of(LocalDate.of(2018, 1, 1),
					LocalTime.of(17, 18, 44), ZoneOffset.UTC));
	public final static String TOKEN_2_STRING = "{\"userId\":100,\"exp\":\"2018-01-01T17:23:44+00:00\","
			+ "\"sub\":\"user-auth\",\"iss\":\"auth.example.com\",\"aud\":\"internal-service.example.com\","
			+ "\"jti\":null,\"nbf\":\"2018-01-01T17:18:44+00:00\",\"iat\":\"2018-01-01T17:18:44+00:00\"}";

	// Minimal token, only iss and exp set.
	public final static Token TOKEN_3 = new Token()
			.setExpiration(OffsetDateTime.of(LocalDate.of(2018, 1, 1),
					LocalTime.of(17, 23, 44), ZoneOffset.UTC))
			.setIssuedAt(OffsetDateTime.of(LocalDate.of(2018, 1, 1),
					LocalTime.of(17, 18, 44), ZoneOffset.UTC));

	// Empty token
	public final static Token TOKEN_4 = new Token();

	public static class CustomToken extends Token {
		private Long userId;

		public Long getUserId() {
			return userId;
		}

		public CustomToken setUserId(Long userId) {
			this.userId = userId;
			return this;
		}

		@Override
		public boolean equals(Object o) {
			if (this == o) return true;
			if (o == null || getClass() != o.getClass()) return false;
			if (!super.equals(o)) return false;
			CustomToken that = (CustomToken) o;
			return Objects.equals(userId, that.userId);
		}

		@Override
		public int hashCode() {
			return Objects.hash(super.hashCode(), userId);
		}

		@Override
		public String toString() {
			return "CustomToken{"
					+ "userId=" + userId
					+ ", token='" + super.toString() + '\''
					+ '}';
		}
	}

	public static byte[] testKey() {
		return ByteArrayTestUtil.convertToByteArray(TEST_KEY);
	}

	public static byte[] testNonce() {
		return ByteArrayTestUtil.convertToByteArray(TEST_NONCE);
	}

	public static byte[] testV1PrivateKey() {
		return ByteArrayTestUtil.convertToByteArray(TEST_RSA_PRIVATE_KEY);
	}

	public static byte[] testV1PublicKey() {
		return ByteArrayTestUtil.convertToByteArray(TEST_RSA_PUBLIC_KEY);
	}

	public static byte[] testV2SecretKey() {
		return ByteArrayTestUtil.convertToByteArray(TEST_SK);
	}

	public static byte[] testV2PublicKey() {
		return ByteArrayTestUtil.convertToByteArray(TEST_PK);
	}
}
